package ch.grademasters.pdf;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.nio.file.Path;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JFileChooser;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class ZeugnisPdf {
	/* Schriften erstellen */
	private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18,
			Font.BOLD);

	// ZeitStempel hinzufuegen
	static Date zeitStempel = new Date();
	// Zaehler
	private static int i = 1;
	// Aktuelles Datum
	static SimpleDateFormat aktuellesDatum = new SimpleDateFormat("dd.MM.yyyy");
	// Aktuelle Zeit
	static SimpleDateFormat aktuelleZeit = new SimpleDateFormat("HH:mm:ss");

	// Output Ordner

	/**
	 * @description Stellt das PDF zusammen
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			boolean exist = true;
			// Neues Dokument anlegen
			Document document = new Document();
			// Neuer Output Stream
			while (exist == true) {
				String file = "D:/Users/zmartl/Desktop/" + "Zeugnis" + i + "-"
						+ aktuellesDatum.format(zeitStempel) + ".pdf";
				if (new File(file).exists()) {
					i = i + 1;
				}
				else {
					PdfWriter.getInstance(document, new FileOutputStream(file));
					exist = false;
				}
				// Dokument oeffnen
			}
			document.open();
			// Meta Tags adden
			addMetaData(document);
			// Titel adden
			addTitlePage(document);
			// Content adden
			addContent(document);
			// Dokument schliessen
			document.close();

			// Wenn alles gut geht, gibt es Okö aus.
			System.out.println("Okö");
			i = i + 1;
			// Exception behandeln
		}
		catch (FileNotFoundException | DocumentException e) {
			System.err.println("Kein Zugriff auf den Ordner."
					+ "\n" + "Bitte überprüfen Sie den Pfad!" + "\n");
			System.out
					.println("Wenn das Problem weiter besteht, Melden Sie sich bitte beim Entwickler."
							+ "\n" + "Error-Meldung:" + "\n");
			e.printStackTrace();
		}
		catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static void addMetaData(Document document) {
		document.addTitle("Zegnis Nr." + i);
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Lars Vogel");
		document.addCreator("Lars Vogel");
	}

	private static void addTitlePage(Document document)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Zeugnis Nr. " + i));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Zeugnis erstellt von: "
				+ System.getProperty("user.name") + ", "
				+ aktuellesDatum.format(zeitStempel) + " - "
				+ aktuelleZeit.format(zeitStempel), catFont));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph(
				"Dein erstelltes Zeugnis ist nicht dein Endzeugnis. Hier fliessen keine Mündlichen Note, etc. mit ein!"));

		addEmptyLine(preface, 8);
		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addContent(Document document) throws DocumentException {
		Anchor anchor = new Anchor("First Chapter");
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);
		Paragraph subPara = new Paragraph("Subcategory 1");
		Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Hello"));

		subPara = new Paragraph("Subcategory 2");
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Paragraph 1"));
		subCatPart.add(new Paragraph("Paragraph 2"));
		subCatPart.add(new Paragraph("Paragraph 3"));

		// add a list
		createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 5);
		subCatPart.add(paragraph);

		// add a table
		createTable(subCatPart);

		// now add all this to the document
		document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter");
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		subPara = new Paragraph("Subcategory");
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("This is a very important message"));

		// now add all this to the document
		document.add(catPart);

	}

	private static void createTable(Section subCatPart)
			throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 2"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 3"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		table.addCell("1.0");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("2.1");
		table.addCell("2.2");
		table.addCell("2.3");

		subCatPart.add(table);

	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
	
}
